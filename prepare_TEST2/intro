Во-первых, синтаксис поиска:

import re

line="зачем учебке понадобилось ставить прогу первой парой в субботу"
result = re.search(r'по(надо)билось',line)
print(result.group(1)) 
Обрати внимание на то, что в предпоследней строке в регулярке выделено круглыми скобками: именно оно будет печататься, когда найдётся
Также смотри, как именно выводится результат: операция поиска присваивается нужной переменной,
а интересующая нас подстрока вытаскивается из нее с помощью .group(1), где 1 – порядковый номер скобочек в строке re.search 
(а то этих скобочек может быть сколько угодно) 
Теперь несколько вещей из того, что раньше рассказывали
. - любой символ (но не перенос строки)
.+ - один или более любых (не обязательно повторяющихся) символов
.* - ноль или более любых (не обязательно повторяющихся) символов
[абв] - любой один из трех символов
\w - любой из буквенных символов, \W - наоборот
[a-z] - любой латинский строчной символ (потому что их коды в таблице UTF идут подряд)
один|два - любая из последовательностей, палка = или 

Про +, *
Их можно ставить после одного символа:
в+ - если хотим найти строки 'в', 'вв', 'ввв' и так далее
Либо после любых групп символов:
[а-яё]+ - один или более символов русского алфавита
\.* - 0 или более точек подряд
Обрати внимание на \ в последнем примере: называется escape-character, ставится, когда нужно найти символ, 
который в регулярках считается специальным, в этом случае - если нам нужна именно точка в строке, а не любой символ

про ?
Называется красиво: "ограничение жадности"
Дело в том, что в строке
tale="<дедка> <бабка> <внучка> <жучка> <кошка> <мышка> <репка>" обычный re.search(r'<.*>',tale)
найдёт "дедка> <бабка> <внучка> <жучка> <кошка> <мышка> <репка", потому что он после .* ищет до последнего вхождения >
Чтобы заставить регулярку наоборот искать до ПЕРВОГО вхождения >, нужно так:
re.search(r'<.*?>',tale)
Тогда будет "дедка"
